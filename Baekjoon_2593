#include <iostream>
#include <queue>

using namespace std;

int ev[101][2];
bool visit[101];
int map[101][100001];

int main()
{
	int N, M;
	int X, Y;
	cin >> N >> M;

	for (int i = 1; i <= M; i++)
	{
		cin >> ev[i][0] >> ev[i][1];
	}

	cin >> X >> Y;

	for (int i = 1; i <= M; i++)
	{
		for (int k = ev[i][0]; k <= N; k = k + ev[i][1])
		{
			map[i][k] = true;
		}
	}
	bool chk_a = false, chk_b = false;
	for (int i = 1; i <= M; i++)
	{
		if (map[i][X] == true) chk_a = true;
		if (map[i][Y] == true) chk_b = true;
	}
	if (X == Y)
	{
		cout << 1 << endl;
		return 0;
	}
	if (chk_a == false || chk_b == false)
	{
		cout << -1 << endl;
		return 0;
	}

	queue<int> s, t, a;
	int curr_s, curr_t, curr_a[101];
	for (int i = 1; i <= M; i++)
	{
		if (map[i][X] == true) {
			s.push(i);
			t.push(1);
			a.push(i);
		}
	}

	while (!s.empty())
	{
		curr_s = s.front(); curr_t = t.front();
		s.pop(); t.pop();
		visit[curr_s] = true;

		for (int i = 0; i < curr_t; i++)
		{
			curr_a[i] = a.front();
			a.pop();
		}

		if (map[curr_s][Y] == true)
		{
			cout << curr_t << endl;
			for (int i = 0; i < curr_t; i++)
				cout << curr_a[i] << endl;
			return 0;
		}

		for (int i = ev[curr_s][0]; i <= N; i = i + ev[curr_s][1])
		{
			for (int k = 1; k <= M; k++)
			{
				if (k == curr_s) continue;
				if (map[k][i] == true)
				{
					if (visit[k] == true)continue;
					s.push(k);
					t.push(curr_t + 1);

					for (int y = 0; y < curr_t; y++) a.push(curr_a[y]);
					a.push(k);
				}				
			}
		}
	}
	cout << -1 << endl;
  return 0;
}

