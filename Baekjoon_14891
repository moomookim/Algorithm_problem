#include <iostream>
#include <cstdio>
using namespace std;

int bq[4][8];
int v[4];
int rot[100][2];

void rotate(int idx, int t);
bool chk_rot(int a, int b);

int main()
{
	for (int i = 0; i < 4; i++)
		for (int k = 0; k < 8; k++)
			scanf("%1d", &bq[i][k]);

	int N;
	cin >> N;
	for (int i = 0; i < N; i++)
		cin >> rot[i][0] >> rot[i][1];

	for (int i = 0; i < N; i++)
	{
		int idx = rot[i][0] -1;
		int rotation = rot[i][1];


		int left = idx - 1;
		int right = idx + 1;

		int tmprotation;
		if (rotation == -1) tmprotation = 1;
		else tmprotation = -1;

		int left_rot = tmprotation;
		int right_rot = tmprotation;

		for (int k = 0; k < 4; k++)
		{
			v[k] = 0;
		}
		v[idx] = rotation;
		while (1)
		{
			if (left < 0) break;
			if (chk_rot(left, left + 1) == true) break;
			v[left] = left_rot;
			left--;
			if (left_rot == -1) left_rot = 1;
			else left_rot = -1;
		}
		while (1)
		{
			if (right > 3) break;
			if (chk_rot(right-1, right) == true) break;
			v[right] = right_rot;
			right++;
			if (right_rot == -1) right_rot = 1;
			else right_rot = -1;
		}
		for (int m = 0; m < 4; m++) {
		//	cout << " v ; " << m << " /  " << v[m] << endl;
			if (v[m] != 0)rotate(m, v[m]);
		}
	}


	int ans = 0;
	if (bq[0][0] == 1) ans = ans + 1;
	if (bq[1][0] == 1) ans = ans + 2;
	if (bq[2][0] == 1) ans = ans + 4;
	if (bq[3][0] == 1) ans = ans + 8;

	cout << ans;

    return 0;
}

void rotate(int idx, int t)
{
	if (t == 1)
	{
		int tmp = bq[idx][7];
		bq[idx][7] = bq[idx][6];
		bq[idx][6] = bq[idx][5];
		bq[idx][5] = bq[idx][4];
		bq[idx][4] = bq[idx][3];
		bq[idx][3] = bq[idx][2];
		bq[idx][2] = bq[idx][1];
		bq[idx][1] = bq[idx][0];
		bq[idx][0] = tmp;
	}
	if (t == -1)
	{
		int tmp = bq[idx][0];
		bq[idx][0] = bq[idx][1];
		bq[idx][1] = bq[idx][2];
		bq[idx][2] = bq[idx][3];
		bq[idx][3] = bq[idx][4];
		bq[idx][4] = bq[idx][5];
		bq[idx][5] = bq[idx][6];
		bq[idx][6] = bq[idx][7];
		bq[idx][7] = tmp;

	}
}

bool chk_rot(int a, int b)
{
	if (bq[a][2] == bq[b][6]) return true;
	else return false;
}
